# Equivalence of Generic and Brand-name Drugs {.unnumbered}

```{r, message=F, warning=F}
library(cmdstanr)
```

This example introduces tracking of deterministic variables and shows how to recreate the BUGS step function in Stan.

It is adapted from [Unit 6: equivalence.odc](../odc_files/unit6/equivalence.odc).

Associated lecture video: Unit 6 lesson 7

## Problem Statement

The manufacturer wishes to demonstrate that their generic drug for a particular metabolic disorder is equivalent to a brand name drug. One of indication of the disorder is an abnormally low concentration of levocarnitine, an amino acid derivative, in the plasma. The treatment with the brand name drug substantially increases this concentration.

A small clinical trial is conducted with 43 patients, 18 in the Brand Name Drug arm and 25 in the Generic Drug arm. The increases in the log-concentration of levocarnitine are in the data below.

The FDA declares that bioequivalence among the two drugs can be established if the difference in response to the two drugs is within 2 units of log-concentration. Assuming that the log-concentration measurements follow normal distributions with equal population variance, can these two drugs be declared bioequivalent within a tolerance +/-2 units?

------------------------------------------------------------------------

### Input Data

Starting with the data pasted from `equivalence.odc`.

```{r input_data}
increase.1 <- c(7, 8, 4, 6, 10, 10, 5, 7, 9, 8, 6, 7, 8, 4, 6, 10, 8, 9)
increase.2 <- c(6, 7, 5, 9, 5, 5, 3, 7, 5, 10, 8, 5, 8, 4, 4, 8, 6, 11, 7, 5, 5, 5, 7, 4, 6)
```

### How do I track non-random variables in Stan?

One nice thing about BUGS is you can easily track both deterministic and non-deterministic variables while sampling. For Stan, you add the variable to the `generated quantities` block.

```{r file_location, include=FALSE}
equivalence_stan <- file.path('stan_models/equivalence.stan')
```

```{r, warning=FALSE, comment=NA, error=FALSE, message=FALSE}
mod <- cmdstan_model(equivalence_stan)
```

### Stress, Diet, and Plasma Acids Model

```{r print_model, echo=FALSE}
mod$print()
```

### Sampling

Let us prepare the data to be passed into sample

```{r}
input_data <- list(N=length(increase.1),
                   M=length(increase.2),
                   y_type1=increase.1,
                   y_type2=increase.2
)
```

Now that we have the data to pass into our sampling, let's proceed.

```{r sampling, message=F, warning=F, results='hide'}
fit <- mod$sample(
  data = input_data,
  seed = 123,
  chains = 4,
  parallel_chains = 4,
  refresh = 500,   # print update every 500 iterations
  iter_warmup = 1000,
  iter_sampling = 5000
)
```

```{r, comment=NA}
fit$summary()
```

These results are very similar to PyMC results and BUGS results.
