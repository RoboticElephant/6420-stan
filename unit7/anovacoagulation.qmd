# Coagulation {.unnumbered}

```{r, message=F, warning=F}
library(cmdstanr)
library(bayesplot)
```

An example of Bayesian ANOVA

It is adapted from [Unit 7: anovacoagulation.odc](../odc_files/unit7/anovacoagulation.odc).

## Problem Statement

Here 24 animals are randomly allocated to 4 different diets, but the numbers allocated to different diets are not the same. The coagulation time for blood is measured for each animal. Are the diet-based differences significant?

[Box, Hunter, Hunter; Statistics for Experimenters, p. 166](https://pages.stat.wisc.edu/~yxu/Teaching/16%20spring%20Stat602/%5bGeorge_E._P._Box,_J._Stuart_Hunter,_William_G._Hu(BookZZ.org).pdf)

### Model

```{r file_location, include=FALSE}
anovacoagulation <- file.path('stan_models/anovacoagulation.stan')
```

```{r, warning=FALSE, comment=NA, error=FALSE, message=FALSE}
mod <- cmdstan_model(anovacoagulation)
```

As you can see, this isn't the best implementation of this. It currently requires typing each variable multiple times. This could have loops, which would reduce having to type out each variable multiple times.

```{r print_model}
mod$print()
```

### Sampling


```{r}
# cut and pasted data from .odc file
times = c(62, 60, 63, 59, 63, 67, 71, 64, 65, 66, 68, 66, 71, 67, 68, 
          68, 56, 62, 60, 61, 63, 64, 63, 59)
diets = c(1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 
          3, 4, 4, 4, 4, 4, 4, 4, 4)

y1 <- times[diets == 1]
y2 <- times[diets == 2]
y3 <- times[diets == 3]
y4 <- times[diets == 4]

input_data <- list(
  N1 = length(y1),
  N2 = length(y2),
  N3 = length(y3),
  N4 = length(y4),
  y1 = y1,
  y2 = y2,
  y3 = y3,
  y4 = y4
)
```

Now that we have the data to pass into our sampling, let's proceed.

```{r sampling, message=F, warning=F, results='hide'}
fit <- mod$sample(
  data = input_data,
  seed = 123,
  chains = 4,
  parallel_chains = 4,
  refresh = 500,   # print update every 500 iterations
  iter_warmup = 1000,
  iter_sampling = 5000
)
```

### Results
Since we don't care about all the values, we are going to select the specific ones we care about.
```{r, comment=NA}
fit$summary(c("alpha4", "alpha3", "alpha2", "alpha1", "onetwo", "onethree", 
              "onefour", "twothree", "twofour", "threefour"))
```

### Plot Intervals
Now that we have the draws from the model, we can use them to plot intervals.

```{r alphas_plot, comment=NA}
fit$draws(variables = c("alpha4", "alpha3", "alpha2", "alpha1")) |>
  mcmc_intervals()

fit$draws(variables = c("mu1", "mu2", "mu3", "mu4", "onetwo", "onethree", 
                        "onefour", "twothree", "twofour", "threefour")) |>
  mcmc_intervals()
```

